#!/bin/bash

set -e

if [ $# -eq 0 ]; then
    pattern=".*\\.h"
fi

if [ $# -eq 1 ]; then
    pattern=".*$1.*\\.h"
fi

rm -f ./tests/.test.c

# compile and all tests individually
find ./tests -regex "$pattern" -print0 | while read -d $'\0' file; do
    name=$(basename "$file" .h)
    printf "#include \".$file\"\\nint main() { test_$name(); return 0; }" > ./tests/.test.c
    gcc ./tests/.test.c -o bin/test -Wall -Wextra -lm
    ./bin/test
    echo -n "."
done

if [ $# -eq 0 ]; then
    # check if all source files have a corresponding test
    find ./src -type f -print0 | while read -d $'\0' file; do
        test=${file/src/tests}
        if [ ! -f "$test" ] && [ "$test" != "./tests/func/all.h" ]; then
            printf "\r\e[KTest missing: ${test}\n" >&2
            exit 1
        fi       
    done

    # check if all functions are included in all.h
    find ./src/func -type f -print0 | while read -d $'\0' file; do
        func=${file/\/src\/func/}
        if ! grep -q "$func" "./src/func/all.h" && [ "$func" != "./all.h" ]; then
            printf "\r\e[KInclude missing in all.h: #include \"${func}\"\n" >&2
            exit 1
        fi
    done

    # compile examples
    find ./examples -type f -print0 | while read -d $'\0' file; do
        gcc "$file" -o bin/test -Wall -Wextra -O3 -lm -lportaudio
    done
fi

if [ -f ./tests/.test.c ]; then
    rm ./tests/.test.c
    printf "\r\e[KAll tests passed\n"
else
    printf "\r\e[KNo tests found for pattern: $1\n" >&2
    exit 1
fi
